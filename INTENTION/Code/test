#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Jan 18 10:46:04 2021

@author: Camila Rodrigues
"""

#%%  #INITIALIZE
import sys
sys.path.append('''C:\Python34\Projects\ARM''')
sys.path.append('''C:\Python34\Lib\site-packages\python_can-1.4-py3.4.egg\can\interfaces''')
import serial
from PCANBasic import PCAN_PCIBUS3, PCAN_BAUD_1M, PCANBasic, PCAN_ERROR_OK, PCAN_ERROR_BUSLIGHT, PCAN_ERROR_BUSHEAVY, PCAN_ERROR_BUSOFF, PCAN_MESSAGE_STANDARD , TPCANMsg, PCAN_NONEBUS  ## PCAN-Basic library import
import time
import numpy as np
import struct
from crccheck.checksum import Checksum8
from scipy.signal import hilbert
from EmgTorque_Lower import EmgTorque
from motReader import motReader
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib.figure import Figure
import tkinter as tk
import matplotlib.pyplot as plt
import pandas as pd
import math
from scipy.signal import filtfilt,butter,iirnotch,freqz
from scipy.fftpack import fft, fftshift, fftfreq
import crc8 as crc8
from crccheck.checksum import Checksum8
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from scipy import signal
import scipy.io
import os
from tkinter import *

from tkinter import filedialog

#%%  SUBJECT
date = '20210607'
subject = 'Filipe'
trial = 'T00'

#%%  SEND CAN MESSAGE FUNCTION
def send_can_msg(can_bus,message):
    result = objPCAN.Write(can_bus,message)
    if result != PCAN_ERROR_OK:
        # An error occured, get a text describing the error and show it
        result = objPCAN.GetErrorText(result)
        print(result)
#    else:
        #print("Message sent successfully")
    return result

#%%  TIME DEFINITION
fs_EMG = 64
timer_emg_get_sample = 0.0
timer_emg_get_sample_init = 0.0
sampling_period_emg  = 1/fs_EMG

recording_time_sec = 20
recording_time = recording_time_sec
timer_recording_time = 0.0
timer_trial = 0.0

timer_computing_exo = 0.0
timer_computing_exo = 0.0

#%%  EAST DEFINITION
PlotTime = 0.1
NumChEMG = 16
Fsamp = 2000
NumCyc = 5
Mode_east = 0 #Always set to 0
Offset = np.array([520, -710, -150, -480, -348, 328, -437,308])
MVC = np.array([1000, 480, 770, 1 , 1, 1, 1, 1])
SerialCOM = '/dev/ttyACM0'
data = np.array([])
ConvFact = float(0.000286*1000) 
                            #Conversion factor to get the signals in mV

# Stimulation parameters (to calculate CONFSTRING)
StimType = 3
StimFreq = 100
StimDur = 400

Time_stim_on = 1
Time_stim_off = 1
Time_tremor_detect_read = 1
Time_stim_tremor_win = 1

trial_sequence = 1
tremor_threshold = 1
tremor_thr_gain_1 = 1
tremor_thr_gain_2 = 1
tremor_time_rms = 1
tremor_detec_muscle = 1

Mode_NRG = 0
StimActCh = np.array([0,0,0,0,0,0,0,0])
StimAmpCh = np.array([0,0,0,0,0,0,0,0])                     #Stimulation Amplitude in mA. The closest value to the dataset is selected

##Fixed parameters, do not change
Resolution = np.array([2])                                  #Resolution in byte      
ConvFact = float(0.000286*1000)                             #Conversion factor to get the signals in mV
acq = int(PlotTime*NumChEMG*Fsamp*2)
Canalacq = int(acq/(2*NumChEMG))

cond = False
# Datasets for stimulation frequencies, durations and amplitudes
StimFreqDataSet = np.array([1,2,3,4,5,6,7,8,9,10,12,14,16,18,20,22,24,26,28,30,35,40,45,50,55,60,65,70,80,90,100])
StimDurDataSet = np.array([100,125,150,175,200,225,250,275,300,325,350,375,400,425,450,475,500,525,550,575,600,625,650,675,700,750,800,850,900,950,1000])
StimAmpDataSet = np.array([0.5,1,1.5,2,2.5,3,3.5,4,4.5,5,5.5,6,6.5,7,7.5,8,8.5,9,9.5,10,10.5,11,12,13,14,15,16,17,18,19,20])

#%% CONFSTRING GENERATOR

ConfString_length = 25
ConfString = np.zeros(ConfString_length).astype('uint8')

ConfString[0] = ConfString_length                        #Number of byte to send

# Switch case MODE
if Mode_east==0:
    ConfString[1] = int('00000000',2)
elif Mode_east==1:
    ConfString[1] = int('01000000',2)
elif Mode_east ==2:
    ConfString[1] = int('10000000',2)
else:
    ConfString[1] = int('00000000',2)    

# Switch case FSAMP
if Fsamp==16000:
    ConfString[1] = ConfString[1] + int('00110000',2)
elif Fsamp==8000:
    ConfString[1] = ConfString[1] + int('00100000',2)
elif Fsamp==4000:
    ConfString[1] = ConfString[1] + int('00010000',2)
elif Fsamp==2000:
    ConfString[1] = ConfString[1] + int('00000000',2)
else:
    ConfString[1] = ConfString[1] + int('00000000',2)

# Switch case NUMCHEMG
if NumChEMG==16:
    ConfString[1] = ConfString[1] + int('00001100',2)
elif NumChEMG==8:
    ConfString[1] = ConfString[1] + int('00001000',2)
elif NumChEMG==4:
    ConfString[1] = ConfString[1] + int('00000100',2)
elif NumChEMG==2:
    ConfString[1] = ConfString[1] + int('00000000',2)
else:
    ConfString[1] = ConfString[1] + int('00000000',2)

# Start data transfer by setting the GO bit = 1
ConfString[1] = ConfString[1] + 1

# Estimate the STIM ACTIVE CHAN byte
ConfString[2] = 0

for i in range(0, 7):
    ConfString[2] = ConfString[2] + StimActCh[i]*2**(i-1);

# Estimate the STIM FREQ AND TYPE byte
StimFreqIndex = 0
minValue = np.array([0])
Val = np.zeros(len(StimFreqDataSet))

for k in range(0,len(StimFreqDataSet)):

    Val[k] = abs(StimFreqDataSet[k]-StimFreq)

minValue = min(Val)
StimFreqIndex = Val.tolist().index(minValue)

ConfString[3] = (StimType*32 + StimFreqIndex) + 1;

# Estimate the STIM DURATION byte

StimDurIndex = 0
Val2 = np.zeros(len(StimDurDataSet))

for r in range(0,len(StimDurDataSet)):

    Val2[r] = abs(StimDurDataSet[r]-StimDur)
    
    
    minValue = min(Val2)
    StimDurIndex = Val2.tolist().index(minValue)
    
    ConfString[4] = StimDurIndex + 1

# Estimate the STIM AMP CH1-8 byte
Val3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]

for n in range(0,len(StimAmpDataSet)):
    Val3[n] = abs(StimAmpDataSet[n]-StimAmpCh[i])
    
for i in range(0, 8):
    
    StimAmpIndex =  0
    minValue = min(Val3)
    StimAmpIndex = Val3.index(minValue)
    ConfString[5+i] = StimAmpIndex + 1
    
ConfString[13] = Time_stim_off
ConfString[14] = Time_stim_on
ConfString[15] = Time_tremor_detect_read
ConfString[16] = Time_stim_tremor_win
ConfString[17] = trial_sequence
ConfString[18] = Mode_NRG
ConfString[19] = tremor_threshold
ConfString[20] = tremor_thr_gain_1
ConfString[21] = tremor_thr_gain_2
ConfString[22] = tremor_time_rms
ConfString[23] = tremor_detec_muscle



#ConfString[13] = compute_crc8(ConfString,initial_value = 0)
#ConfString[24] = crc8.fcn_crc8(ConfString[0:23])

ConfString[24] = crc8.fcn_crc8_ot(ConfString,24)#254
ConfString_out = bytes(ConfString)
#ConfString_aux=bytes([25,9,0,127,13,0,0,0,0,0,0,0,0,30,30,1,4,0,0,40,12,12,15,1,132])
#print(ConfString)

repeat=30



#Time_emg = np.linspace(0,(Canalacq/Fsamp),Canalacq)

Time_emg = np.linspace(0,(Canalacq/sampling_period_emg),Canalacq*repeat)


Canal1 = np.zeros(Canalacq)
Canal2 = np.zeros(Canalacq)
Canal3 = np.zeros(Canalacq)
Canal4 = np.zeros(Canalacq)
Canal5 = np.zeros(Canalacq)
Canal6 = np.zeros(Canalacq)
Canal7 = np.zeros(Canalacq)
Canal8 = np.zeros(Canalacq)
Canal9 = np.zeros(Canalacq)
Canal10 = np.zeros(Canalacq)
Canal11 = np.zeros(Canalacq)
Canal12 = np.zeros(Canalacq)
Canal13 = np.zeros(Canalacq)
Canal14 = np.zeros(Canalacq)
Canal15 = np.zeros(Canalacq)
Canal16 = np.zeros(Canalacq)

Canal1_Total = []
Canal2_Total = []
Canal3_Total = []
Canal4_Total = []
Canal5_Total = []
Canal6_Total = []
Canal7_Total = []
Canal8_Total = []
Canal9_Total = []
Canal10_Total = []
Canal11_Total = []
Canal12_Total = []
Canal13_Total = []
Canal14_Total = []
Canal15_Total = []
Canal16_Total = []



Canal1_env_Total = []
Canal2_env_Total = []
Canal3_env_Total = []
Canal4_env_Total = []
Canal5_env_Total = []
Canal6_env_Total = []


#Canal1_env_Inter = []
#Canal2_env_Inter = []
#Canal3_env_Inter = []
#Canal4_env_Inter = []
#Canal5_env_Inter = []

Canal1_env_but_total = []
Canal2_env_but_total = []
Canal3_env_but_total = []
Canal4_env_but_total = []
Canal5_env_but_total = []

Canal1_env_but = []
Canal2_env_but = []
Canal3_env_but = []
Canal4_env_but = []
Canal5_env_but = []

torque_sum = 0
torque_fin = 0

#%%  SERIAL PORT 
# Estimates the total number of channels received depending on the mode
NumChTot = 16 

# Number of samples for each plot cycle
NumSamples = Fsamp * PlotTime

# COM buffer size
BufSize = Fsamp*PlotTime*2*NumChTot

# COM settings and open
bau = 921600
port = SerialCOM
s = serial.Serial(port, bau, timeout=12)

s.write(ConfString_out)

comp_time = np.array([0])
channel_to_read = 1
#    time.sleep(0.015)


timer_recording_time = time.perf_counter()
timer_emg_get_sample_init = time.perf_counter()
timer_trial = time.perf_counter()-timer_recording_time

# Waits for next sample
while(timer_emg_get_sample <= sampling_period_emg):
    timer_emg_get_sample = time.perf_counter()-timer_emg_get_sample_init          
    pass
timer_emg_get_sample_init = time.perf_counter()

# READ EMG
#Sig = s.read(acq)

index_FS=0
state=0 # SI vale 0 está en el estado inicial si está en 1, walking, si está en 2 stoppwalking y 3 positionzero
       
for h in range(0,repeat):
    

    Sig = s.read(acq)
#                print("Sig", Sig)
    
    k = 0
    c = 0
    start_comp_time = time.perf_counter()
    info = [Sig[i:i+2] for i in range(0, len(Sig), 2)]    
    
    while k < (acq/2):

        
        for j in range(0,NumChEMG,1):
            
            if j == 0:
                Canal1[c] = (ConvFact*(int.from_bytes(info[k],byteorder='little', signed=True)) - Offset[0])/MVC[0]
#                Canal1_Total.append(Canal1[c])
                Canal1_Total=np.concatenate((Canal1_Total,Canal1[c]),axis=None)

                
            elif j == 1:
                Canal2[c] = (ConvFact*(int.from_bytes(info[k],byteorder='little', signed=True)) - Offset[1])/MVC[1]
                Canal2_Total.append(Canal2[c])

            
            elif j == 2:
                Canal3[c] = (ConvFact*(int.from_bytes(info[k],byteorder='little', signed=True))  - Offset[2])/MVC[2]
                Canal3_Total.append(Canal3[c])

                
            elif j == 3:
                Canal4[c] = (ConvFact*(int.from_bytes(info[k],byteorder='little', signed=True)) - Offset[3])/MVC[3]
                Canal4_Total.append(Canal4[c])

                
            elif j == 4:
                Canal5[c] = (ConvFact*(int.from_bytes(info[k],byteorder='little', signed=True))- Offset[4])/MVC[4] 
                Canal5_Total.append(Canal5[c])
                
            elif j == 5:
                Canal6[c] = (ConvFact*(int.from_bytes(info[k],byteorder='little', signed=True)) - Offset[5])/MVC[5]
                Canal6_Total.append(Canal6[c])

                
            elif j == 6:
                Canal7[c] = ConvFact*(int.from_bytes(info[k],byteorder='little', signed=True)) - Offset[6]/MVC[6]
                Canal7_Total.append(Canal7[c])
                
            elif j == 7:
                Canal8[c] = ConvFact*(int.from_bytes(info[k],byteorder='little', signed=True)) - Offset[7]/MVC[7]
                Canal8_Total.append(Canal8[c])
                
            elif j == 8:
                Canal9[c] = ConvFact*(int.from_bytes(info[k],byteorder='little', signed=True)) - Offset[7]/MVC[7]
                Canal9_Total.append(Canal9[c])
                
            elif j == 9:
                Canal10[c] = ConvFact*(int.from_bytes(info[k],byteorder='little', signed=True)) - Offset[7]/MVC[7]
                Canal10_Total.append(Canal10[c])
                
            elif j == 10:
                Canal11[c] = ConvFact*(int.from_bytes(info[k],byteorder='little', signed=True)) - Offset[7]/MVC[7]
                Canal11_Total.append(Canal11[c])
                
            elif j == 11:
                Canal12[c] = ConvFact*(int.from_bytes(info[k],byteorder='little', signed=True)) - Offset[7]/MVC[7]
                Canal12_Total.append(Canal12[c])
            k=k+1 
        c=c+1
print("Total", len(Canal12_Total))
        
#%% STOP COMMUNICATION
ConfString=bytes([25,0,0,120,17,1,1,1,1,1,1,1,1,30,30,4,1,1,0,10,10,10,10,1,25]) 
s.write(ConfString)
s.close()
print("EMG closed")
